<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD Operations</title>
    <style>
        body {
            background-color: #f2f2f2;
            font-family: Arial, sans-serif;
        }
        h1 {
            text-align: center;
            color: green;
            margin-bottom: 10px;
        }
        h2 {
            text-align: center;
        }
        p {
            text-align: center;
            color: green;
        }
        .container {
            text-align: center;
            max-width: 1250px;
            height: 600px;
            margin: 30px auto;
            padding: 20px;
            border: 2px solid #ccc;
            background-color: white;
            border-radius: 5px;
            border-top: solid green;
            margin-top: 5px;
            border-top-width: 5px;
        }
        label {
            text-align: left;
            margin-left: 30px;
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }
        select {
            font-weight: bold;
            margin-bottom: 30px;
            width: 350px;
            padding: 5px;
        }
        input {
            width: 350px;
            padding: 5px;
            margin-bottom: 10px;
        }
        h3 {
            text-align: center;
            margin-top: 20px;
        }
        em {
            color: orange;
        }
        textarea {
            resize: vertical;
            width: 1200px;
            height: 100px;
            padding: 5px;
        }
        .row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .form-group {
            flex: 1;
            margin-right: 10px;
        }
        .form-group:last-child {
            margin-right: 0;
        }
        hr {
            border: 1px solid black;
            width: 200px;
            margin: 20px auto;
        }
        h4 {
            font-weight: bolder;
            text-align: center;
            font-size: 30px;
            color: #2e8a06;
        }
        input[type="submit"] {
            background-color: #2e8a06;
            color: white;
            border-radius: 12px;
            cursor: pointer;
            padding: 10px 20px;
            width: 150px;
            margin-left: 175px;
        }
        input[type="submit"]:hover {
            background-color: #1d5003;
            border-radius: 12px;
        }
        button {
            background-color: #099302;
            color: rgb(243, 243, 243);
            border-radius: 12px;
            cursor: pointer;
            padding: 10px 20px;
            width: 150px;
            height: 40px;
        }
        button:hover {
            background-color: #1d5003;
            border-radius: 12px;
        }
        .ref-id-label {
            font-weight: bold;
            margin-right: 1100px;
            display: relative;
        }
        .ref-id-input {
            width: 150px;
            padding: 5px;
            font-size: 14px;
            display:inline-block;
            margin-right: 800px;
            margin-top: -25px;
            vertical-align: top;
        }
        .read-only {
            background-color: #f0f0f0;
        }
        .editable {
            background-color: white;
        }
        .required-field::after {
            content: " *";
            color: red;
        }
        .error-message {
            color: red;
            font-size: 12px;
            text-align: left;
            margin-left: 30px;
            margin-top: -5px;
            margin-bottom: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><em>Elai</em>.com</h1>
        <hr>
        <h2><p>Cash On Delivery</p></h2>

        <form id="dataForm">
            <div class="ref-id-container">
                <label for="ref_id">Reference ID:</label>
                <input type="text" id="ref_id" name="ref_id" class="ref-id-input" required>
                <div id="ref_id_error" class="error-message">Reference ID is required</div>
            </div>

            <div class="row">
                <div class="form-group">
                    <label for="type" class="required-field">Customer Type</label>
                    <select id="customer" name="type" disabled required>
                        <option value="">Select</option>
                        <option value="New Customer">New Customer</option>
                        <option value="Old Customer">Old Customer</option>
                    </select>
                    <div id="customer_error" class="error-message">Customer Type is required</div>
                </div>
                <div class="form-group">
                    <label for="friend" class="required-field">Friend/Relative Name</label>
                    <input type="text" id="refer" name="friend" readonly class="read-only" required>
                    <div id="refer_error" class="error-message">Friend/Relative Name is required</div>
                </div>
                <div class="form-group">
                    <label for="friendnumber" class="required-field">Friend/Relative Phone</label>
                    <input type="number" id="friendnumber" name="friendnumber" readonly class="read-only" required>
                    <div id="friendnumber_error" class="error-message">Friend/Relative Phone is required</div>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <label for="name" class="required-field">Full Name</label>
                    <input type="text" id="fullName" name="name" readonly class="read-only" required>
                    <div id="fullName_error" class="error-message">Full Name is required</div>
                </div>
                <div class="form-group">
                    <label for="yournumber" class="required-field">Phone Number</label>
                    <input type="number" id="yournumber" name="yournumber" readonly class="read-only" required>
                    <div id="yournumber_error" class="error-message">Phone Number is required</div>
                </div>
                <div class="form-group">
                    <label for="pincode" class="required-field">Pincode</label>
                    <input type="number" id="pincode" name="pincode" readonly class="read-only" required>
                    <div id="pincode_error" class="error-message">Pincode is required</div>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <label for="address" class="required-field">Address</label>
                    <textarea id="address" name="address" readonly class="read-only" required></textarea>
                    <div id="address_error" class="error-message">Address is required</div>
                </div>
            </div>

            <div class="button-container">
                <input type="submit" value="SUBMIT">
                <button type="button" id="viewButton">VIEW</button>
                <button type="button" id="editButton">EDIT</button>
                <button type="button" id="clearButton">CLEAR</button>
                <button type="button" id="deleteButton">DELETE</button>
                <button type="button" id="cancelButton">CANCEL</button>
            </div>
        </form>
    </div>

    <div class="footer">
        <h3>Developed By Sanchai</h3>
    </div>
    <script>
        // Function to fetch and display the next reference ID
        async function fetchAndDisplayNextId() {
            try {
                const response = await fetch('/getnextid');
                const data = await response.json();
                if (data.nextId) {
                    document.getElementById('ref_id').value = data.nextId;
                }
            } catch (error) {
                console.error('Error fetching next ID:', error);
                document.getElementById('ref_id').value = 1;
            }
        }

        // Helper function to reset form
        function resetForm() {
            document.getElementById('customer').value = '';
            document.getElementById('refer').value = '';
            document.getElementById('friendnumber').value = '';
            document.getElementById('fullName').value = '';
            document.getElementById('yournumber').value = '';
            document.getElementById('pincode').value = '';
            document.getElementById('address').value = '';
            fetchAndDisplayNextId();
            // Hide all error messages when form is reset
            document.querySelectorAll('.error-message').forEach(el => {
                el.style.display = 'none';
            });
        }

        // Helper function to set form fields read-only
        function setFormReadOnly(readOnly) {
            const fields = [
                {id: 'customer', type: 'select'},
                {id: 'refer', type: 'input'},
                {id: 'friendnumber', type: 'input'},
                {id: 'fullName', type: 'input'},
                {id: 'yournumber', type: 'input'},
                {id: 'pincode', type: 'input'},
                {id: 'address', type: 'textarea'}
            ];
            
            fields.forEach(field => {
                const element = document.getElementById(field.id);
                if (field.type === 'select') {
                    element.disabled = readOnly;
                } else {
                    element.readOnly = readOnly;
                    element.classList.toggle('read-only', readOnly);
                }
            });
        }

        // Function to make reference ID editable
        function makeRefIdEditable(editable) {
            const refIdInput = document.getElementById('ref_id');
            refIdInput.readOnly = !editable;
            refIdInput.classList.toggle('editable', editable);
        }

        // Function to validate form
        function validateForm() {
            let isValid = true;
            const requiredFields = [
                'ref_id', 'customer', 'refer', 'friendnumber', 
                'fullName', 'yournumber', 'pincode', 'address'
            ];

            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                const errorElement = document.getElementById(`${fieldId}_error`);
                
                if (!field.value.trim()) {
                    errorElement.style.display = 'block';
                    isValid = false;
                } else {
                    errorElement.style.display = 'none';
                }
            });

            return isValid;
        }

        // Form submission for both CREATE and UPDATE
        document.getElementById('dataForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!validateForm()) {
                return;
            }

            const formData = new FormData(this);
            const jsonData = {};
            formData.forEach((value, key) => jsonData[key] = value);

            // Determine if this is an update or create operation
            const isUpdate = document.getElementById('ref_id').readOnly === false && 
                             document.getElementById('customer').disabled === false;

            try {
                const url = isUpdate ? '/updatedata' : '/handleform';
                const method = isUpdate ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(jsonData)
                });
                
                const data = await response.json();
                if (data.success) {
                    if (isUpdate) {
                        alert(`Data updated successfully for ID: ${jsonData.ref_id}`);
                    } else {
                        alert(`Data submitted successfully with ID: ${data.newId}`);
                        document.getElementById('ref_id').value = data.nextId;
                    }
                    resetForm();
                } else {
                    alert(data.error || (isUpdate ? 'Failed to update data.' : 'Failed to submit data.') + ' Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            }
        });

        // VIEW button functionality - makes ref_id editable
        document.getElementById('viewButton').addEventListener('click', async function() {
            const ref_id = document.getElementById('ref_id').value.trim();
            if (!ref_id) {
                document.getElementById('ref_id_error').style.display = 'block';
                return;
            } else {
                document.getElementById('ref_id_error').style.display = 'none';
            }

            makeRefIdEditable(true);

            try {
                const response = await fetch(`/fetchdata?id=${ref_id}`);
                const data = await response.json();
                if (data.error) {
                    alert(data.error);
                } else {
                    document.getElementById('customer').value = data.type || '';
                    document.getElementById('refer').value = data.friend || '';
                    document.getElementById('friendnumber').value = data.friendnumber || '';
                    document.getElementById('fullName').value = data.name || '';
                    document.getElementById('yournumber').value = data.yournumber || '';
                    document.getElementById('pincode').value = data.pincode || '';
                    document.getElementById('address').value = data.address || '';
                    setFormReadOnly(true);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to fetch data. Please try again.');
            }
        });

        // EDIT button functionality - makes ref_id editable
        document.getElementById('editButton').addEventListener('click', function() {
            const ref_id = document.getElementById('ref_id').value.trim();
            if (!ref_id) {
                alert('Please view a record first.');
                return;
            }
            makeRefIdEditable(true);
            setFormReadOnly(false);
        });

        // DELETE button functionality - makes ref_id editable
        document.getElementById('deleteButton').addEventListener('click', async function() {
            const ref_id = document.getElementById('ref_id').value.trim();
            if (!ref_id) {
                document.getElementById('ref_id_error').style.display = 'block';
                return;
            } else {
                document.getElementById('ref_id_error').style.display = 'none';
            }

            makeRefIdEditable(true);

            if (confirm('Are you sure you want to delete this record?')) {
                try {
                    const response = await fetch(`/deletedata?id=${ref_id}`, { 
                        method: 'DELETE' 
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert('Record deleted successfully!');
                        document.getElementById('ref_id').value = data.nextId;
                        resetForm();
                    } else {
                        alert(data.error || 'Failed to delete record.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again.');
                }
            }
        });

        // CLEAR button functionality
        document.getElementById('clearButton').addEventListener('click', function() {
            resetForm();
            setFormReadOnly(false);
            makeRefIdEditable(false);
        });

        // CANCEL button functionality
        document.getElementById('cancelButton').addEventListener('click', function() {
            resetForm();
            setFormReadOnly(false);
            makeRefIdEditable(false);
        });

        // Initialize form state
        document.addEventListener('DOMContentLoaded', function() {
            fetchAndDisplayNextId();
            setFormReadOnly(false);
            makeRefIdEditable(false);
        });

        document.getElementById('cancelButton').addEventListener('click', function() {
            window.location.href = '/cancel';
        });

        // Add event listeners to hide error messages when user starts typing
        document.querySelectorAll('input, select, textarea').forEach(element => {
            element.addEventListener('input', function() {
                const errorId = this.id + '_error';
                const errorElement = document.getElementById(errorId);
                if (errorElement) {
                    errorElement.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>